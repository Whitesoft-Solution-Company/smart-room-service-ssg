---
import { Icon } from 'astro-icon/components'
import { languages } from '../i18n/ui';

const currentLocale = (Astro.currentLocale || 'en') as keyof typeof languages;
const currentPath = Astro.url.pathname;
const authToken = Astro.cookies.get('authToken')?.value;

const getLocalizedPath = (newLang: string) => {
  const pathSegments = currentPath.split("/").filter(Boolean);

  if (pathSegments.length > 1 && pathSegments[1].length === 2) {
    pathSegments[1] = newLang;
  } else {
    pathSegments.splice(1, 0, newLang);
  }

  return `/${pathSegments.join("/")}`;
};

---

<header class="bg-white dark:bg-gray-800">
  <nav class="mx-auto flex max-w-9/12 items-center justify-between py-5 lg:px-8" aria-label="Global">
    <div class="flex lg:flex-1 justify-center">
      <a href=`/protected/${currentLocale}/home` class="-m-1.5 p-1.5">
        <img id="hotelImage" class="h-10 w-auto" >
      </a>
    </div>
    <!-- Language Switcher -->
  {authToken && (
  <div>
    <details class="dropdown dropdown-end">
      <summary class="btn py-2.5 px-5 me-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-gray-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">
        <Icon name={`circle-flags:${currentLocale}`} />
        <span>{languages[currentLocale]}</span>
      </summary>
      <ul class="menu dropdown-content bg-gray-100 rounded-box z-1 w-30 p-2  text-gray-600">
        {Object.entries(languages).map(([lang, label]) => (
          <li>
            <a href={getLocalizedPath(lang)}>
              <Icon name={`circle-flags:${lang}`} />
              {label}
            </a>
          </li>
        ))}
      </ul>
    </details>
  </div>
)}
  
  </nav>
  </div>
</header>

<script>
  import { STRAPI_API } from "astro:env/client";

  function getCookie(name: string) {
    const cookies = document.cookie.split('; ');
    for (let cookie of cookies) {
      const [key, value] = cookie.split('=');
      if (key === name) return decodeURIComponent(value);
    }
    return null;
  }

  document.addEventListener("DOMContentLoaded", async () => {
    const authToken = getCookie("authToken"); // Retrieve authToken from cookies
    if (authToken) {
      try {
        const res = await fetch(
          `https://service.ananyalipe.com/api/hotels/${authToken}?populate=*`
        );
        const { data: hotels } = await res.json();

        if (hotels) {
          const hotelImageUrl = hotels?.logo?.url;
          const imgElement = document.getElementById("hotelImage");

          if (imgElement && hotelImageUrl) {
            (imgElement as HTMLImageElement).src = `https://service.ananyalipe.com${hotelImageUrl}`;
          } else {
            if (imgElement) {
              (imgElement as HTMLImageElement).src = "/no-photo.png";
            }
          }
        } else {
          console.log("No hotels found.");
        }
      } catch (error) {
        console.error("Error fetching hotels:", error);
      }
    }
  });
</script>